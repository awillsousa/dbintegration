// <auto-generated />
namespace FsEfTest.Migrations

open System
open FsEfTest.Models
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion
open Npgsql.EntityFrameworkCore.PostgreSQL.Metadata

[<DbContext(typeof<dbintegrationContext>)>]
[<Migration("20210825194457_Initial")>]
type Initial() =
    inherit Migration()

    override this.Up(migrationBuilder:MigrationBuilder) =
        migrationBuilder.CreateTable(
            name = "Currency"
            ,columns = (fun table -> 
            {|
                CurrencyID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    ).Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                Alias =
                    table.Column<string>(
                        nullable = true
                        ,``type`` = "text"
                    )
                Name =
                    table.Column<string>(
                        nullable = true
                        ,``type`` = "text"
                    )
                Symbol =
                    table.Column<string>(
                        nullable = true
                        ,``type`` = "text"
                    )
            |})
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Currency", (fun x -> (x.CurrencyID) :> obj)) |> ignore
                ) 
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "Provider"
            ,columns = (fun table -> 
            {|
                ProviderID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    ).Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                Description =
                    table.Column<string>(
                        nullable = true
                        ,``type`` = "text"
                    )
                Name =
                    table.Column<string>(
                        nullable = true
                        ,``type`` = "text"
                    )
                ShortName =
                    table.Column<string>(
                        nullable = true
                        ,``type`` = "text"
                    )
            |})
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Provider", (fun x -> (x.ProviderID) :> obj)) |> ignore
                ) 
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "CurrencyPair"
            ,columns = (fun table -> 
            {|
                CurrencyPairID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    ).Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                Alias =
                    table.Column<string>(
                        nullable = true
                        ,``type`` = "text"
                    )
                FirstCurrencyID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    )
                SecondCurrencyID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    )
            |})
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("PK_CurrencyPair", (fun x -> (x.CurrencyPairID) :> obj)) |> ignore
                    table.ForeignKey(
                        name = "FK_CurrenyID_1",
                        column = (fun x -> (x.FirstCurrencyID) :> obj)
                        ,principalTable = "Currency"
                        ,principalColumn = "CurrencyID"
                        ,onDelete = ReferentialAction.Restrict
                        ) |> ignore

                    table.ForeignKey(
                        name = "FK_CurrenyID_2",
                        column = (fun x -> (x.SecondCurrencyID) :> obj)
                        ,principalTable = "Currency"
                        ,principalColumn = "CurrencyID"
                        ,onDelete = ReferentialAction.Restrict
                        ) |> ignore

                ) 
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "RateRecord"
            ,columns = (fun table -> 
            {|
                RateRecordID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    ).Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                CurrencyPairID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    )
                DateTimeRate =
                    table.Column<DateTime>(
                        nullable = false
                        ,``type`` = "date"
                    )
                Price =
                    table.Column<decimal>(
                        nullable = false
                        ,``type`` = "numeric"
                    )
                ProviderID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    )
            |})
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("PK_RateRecord", (fun x -> (x.RateRecordID) :> obj)) |> ignore
                    table.ForeignKey(
                        name = "FK_CurrencyPair_ID",
                        column = (fun x -> (x.CurrencyPairID) :> obj)
                        ,principalTable = "CurrencyPair"
                        ,principalColumn = "CurrencyPairID"
                        ,onDelete = ReferentialAction.Restrict
                        ) |> ignore

                    table.ForeignKey(
                        name = "FK_ProviderID",
                        column = (fun x -> (x.ProviderID) :> obj)
                        ,principalTable = "Provider"
                        ,principalColumn = "ProviderID"
                        ,onDelete = ReferentialAction.Restrict
                        ) |> ignore

                ) 
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "TradeRecord"
            ,columns = (fun table -> 
            {|
                TradeRecordID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    ).Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                DateTimeTransaction =
                    table.Column<DateTime>(
                        nullable = false
                        ,``type`` = "timestamp without time zone"
                    )
                Quantity =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    )
                TradeRateID =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "bigint"
                    )
                TypeTransaction =
                    table.Column<string>(
                        nullable = true
                        ,``type`` = "text"
                    )
            |})
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("PK_TradeRecord", (fun x -> (x.TradeRecordID) :> obj)) |> ignore
                    table.ForeignKey(
                        name = "FK_TradeRate_ID",
                        column = (fun x -> (x.TradeRateID) :> obj)
                        ,principalTable = "RateRecord"
                        ,principalColumn = "RateRecordID"
                        ,onDelete = ReferentialAction.Restrict
                        ) |> ignore

                ) 
        ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_CurrencyPair_FirstCurrencyID"
            ,table = "CurrencyPair"
            ,column = "FirstCurrencyID"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_CurrencyPair_SecondCurrencyID"
            ,table = "CurrencyPair"
            ,column = "SecondCurrencyID"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_RateRecord_CurrencyPairID"
            ,table = "RateRecord"
            ,column = "CurrencyPairID"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_RateRecord_ProviderID"
            ,table = "RateRecord"
            ,column = "ProviderID"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_TradeRecord_TradeRateID"
            ,table = "TradeRecord"
            ,column = "TradeRateID"
            ) |> ignore


    override this.Down(migrationBuilder:MigrationBuilder) =
        migrationBuilder.DropTable(
            name = "TradeRecord"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "RateRecord"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "CurrencyPair"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Provider"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Currency"
            ) |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder

            .UseIdentityByDefaultColumns().HasAnnotation("Relational:Collation", "en_US.utf8")
            .HasAnnotation("Relational:MaxIdentifierLength", 63)
            .HasAnnotation("ProductVersion", "5.0.9")
            |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+Currency", (fun b ->

            b.Property<Int64>("CurrencyId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("CurrencyID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<string>("Alias")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<string>("Name")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<string>("Symbol")
                .IsRequired(false)
                .HasColumnType("text") |> ignore

            b.HasKey("CurrencyId") |> ignore

            b.ToTable("Currency") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+CurrencyPair", (fun b ->

            b.Property<Int64>("CurrencyPairId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("CurrencyPairID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<string>("Alias")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<Int64>("FirstCurrencyId")
                .IsRequired(true)
                .HasColumnType("bigint")
                .HasColumnName("FirstCurrencyID") |> ignore
            b.Property<Int64>("SecondCurrencyId")
                .IsRequired(true)
                .HasColumnType("bigint")
                .HasColumnName("SecondCurrencyID") |> ignore

            b.HasKey("CurrencyPairId") |> ignore


            b.HasIndex("FirstCurrencyId") |> ignore


            b.HasIndex("SecondCurrencyId") |> ignore

            b.ToTable("CurrencyPair") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+Provider", (fun b ->

            b.Property<Int64>("ProviderId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("ProviderID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<string>("Description")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<string>("Name")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<string>("ShortName")
                .IsRequired(false)
                .HasColumnType("text") |> ignore

            b.HasKey("ProviderId") |> ignore

            b.ToTable("Provider") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+RateRecord", (fun b ->

            b.Property<Int64>("RateRecordId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("RateRecordID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<Int64>("CurrencyPairId")
                .IsRequired(true)
                .HasColumnType("bigint")
                .HasColumnName("CurrencyPairID") |> ignore
            b.Property<DateTime>("DateTimeRate")
                .IsRequired(true)
                .HasColumnType("date") |> ignore
            b.Property<decimal>("Price")
                .IsRequired(true)
                .HasColumnType("numeric") |> ignore
            b.Property<Int64>("ProviderId")
                .IsRequired(true)
                .HasColumnType("bigint")
                .HasColumnName("ProviderID") |> ignore

            b.HasKey("RateRecordId") |> ignore


            b.HasIndex("CurrencyPairId") |> ignore


            b.HasIndex("ProviderId") |> ignore

            b.ToTable("RateRecord") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+TradeRecord", (fun b ->

            b.Property<Int64>("TradeRecordId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("TradeRecordID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<DateTime>("DateTimeTransaction")
                .IsRequired(true)
                .HasColumnType("timestamp without time zone") |> ignore
            b.Property<Int64>("Quantity")
                .IsRequired(true)
                .HasColumnType("bigint") |> ignore
            b.Property<Int64>("TradeRateId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("TradeRateID") |> ignore
            b.Property<string>("TypeTransaction")
                .IsRequired(false)
                .HasColumnType("text") |> ignore

            b.HasKey("TradeRecordId") |> ignore


            b.HasIndex("TradeRateId") |> ignore

            b.ToTable("TradeRecord") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+CurrencyPair", (fun b ->
            b.HasOne("FsEfTest.Models.dbintegrationDomain+Currency","FirstCurrency")
                .WithMany("CurrencyPairFirstCurrencies")
                .HasForeignKey("FirstCurrencyId")
                .HasConstraintName("FK_CurrenyID_1")
                .IsRequired() |> ignore
            b.HasOne("FsEfTest.Models.dbintegrationDomain+Currency","SecondCurrency")
                .WithMany("CurrencyPairSecondCurrencies")
                .HasForeignKey("SecondCurrencyId")
                .HasConstraintName("FK_CurrenyID_2")
                .IsRequired() |> ignore
        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+RateRecord", (fun b ->
            b.HasOne("FsEfTest.Models.dbintegrationDomain+CurrencyPair","CurrencyPair")
                .WithMany("RateRecords")
                .HasForeignKey("CurrencyPairId")
                .HasConstraintName("FK_CurrencyPair_ID")
                .IsRequired() |> ignore
            b.HasOne("FsEfTest.Models.dbintegrationDomain+Provider","Provider")
                .WithMany("RateRecords")
                .HasForeignKey("ProviderId")
                .HasConstraintName("FK_ProviderID")
                .IsRequired() |> ignore
        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+TradeRecord", (fun b ->
            b.HasOne("FsEfTest.Models.dbintegrationDomain+RateRecord","TradeRate")
                .WithMany("TradeRecords")
                .HasForeignKey("TradeRateId")
                .HasConstraintName("FK_TradeRate_ID")
                .IsRequired() |> ignore
        )) |> ignore


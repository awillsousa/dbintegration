// <auto-generated />
namespace FsEfTest.Migrations

open System
open FsEfTest.Models
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion
open Npgsql.EntityFrameworkCore.PostgreSQL.Metadata

[<DbContext(typeof<dbintegrationContext>)>]
type dbintegrationContextModelSnapshot() =
    inherit ModelSnapshot()

    override this.BuildModel(modelBuilder: ModelBuilder) =
        modelBuilder

            .UseIdentityByDefaultColumns().HasAnnotation("Relational:Collation", "en_US.utf8")
            .HasAnnotation("Relational:MaxIdentifierLength", 63)
            .HasAnnotation("ProductVersion", "5.0.9")
            |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+Currency", (fun b ->

            b.Property<Int64>("CurrencyId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("CurrencyID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<string>("Alias")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<string>("Name")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<string>("Symbol")
                .IsRequired(false)
                .HasColumnType("text") |> ignore

            b.HasKey("CurrencyId") |> ignore

            b.ToTable("Currency") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+CurrencyPair", (fun b ->

            b.Property<Int64>("CurrencyPairId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("CurrencyPairID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<string>("Alias")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<Int64>("FirstCurrencyId")
                .IsRequired(true)
                .HasColumnType("bigint")
                .HasColumnName("FirstCurrencyID") |> ignore
            b.Property<Int64>("SecondCurrencyId")
                .IsRequired(true)
                .HasColumnType("bigint")
                .HasColumnName("SecondCurrencyID") |> ignore

            b.HasKey("CurrencyPairId") |> ignore


            b.HasIndex("FirstCurrencyId") |> ignore


            b.HasIndex("SecondCurrencyId") |> ignore

            b.ToTable("CurrencyPair") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+Provider", (fun b ->

            b.Property<Int64>("ProviderId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("ProviderID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<string>("Description")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<string>("LongName")
                .IsRequired(false)
                .HasColumnType("text") |> ignore
            b.Property<string>("ShortName")
                .IsRequired(false)
                .HasColumnType("text") |> ignore

            b.HasKey("ProviderId") |> ignore

            b.ToTable("Provider") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+RateRecord", (fun b ->

            b.Property<Int64>("RateRecordId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("RateRecordID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<Int64>("CurrencyPairId")
                .IsRequired(true)
                .HasColumnType("bigint")
                .HasColumnName("CurrencyPairID") |> ignore
            b.Property<DateTime>("DateTimeRate")
                .IsRequired(true)
                .HasColumnType("date") |> ignore
            b.Property<decimal>("Price")
                .IsRequired(true)
                .HasColumnType("numeric") |> ignore
            b.Property<Int64>("ProviderId")
                .IsRequired(true)
                .HasColumnType("bigint")
                .HasColumnName("ProviderID") |> ignore

            b.HasKey("RateRecordId") |> ignore


            b.HasIndex("CurrencyPairId") |> ignore


            b.HasIndex("ProviderId") |> ignore

            b.ToTable("RateRecord") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+TradeRecord", (fun b ->

            b.Property<Int64>("TradeRecordId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("TradeRecordID")
                .UseIdentityByDefaultColumn() |> ignore
            b.Property<DateTime>("DateTimeTransaction")
                .IsRequired(true)
                .HasColumnType("timestamp without time zone") |> ignore
            b.Property<Int64>("Quantity")
                .IsRequired(true)
                .HasColumnType("bigint") |> ignore
            b.Property<Int64>("TradeRateId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("bigint")
                .HasColumnName("TradeRateID") |> ignore
            b.Property<string>("TypeTransaction")
                .IsRequired(false)
                .HasColumnType("text") |> ignore

            b.HasKey("TradeRecordId") |> ignore


            b.HasIndex("TradeRateId") |> ignore

            b.ToTable("TradeRecord") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+CurrencyPair", (fun b ->
            b.HasOne("FsEfTest.Models.dbintegrationDomain+Currency","FirstCurrency")
                .WithMany("CurrencyPairFirstCurrencies")
                .HasForeignKey("FirstCurrencyId")
                .HasConstraintName("FK_CurrenyID_1")
                .IsRequired() |> ignore
            b.HasOne("FsEfTest.Models.dbintegrationDomain+Currency","SecondCurrency")
                .WithMany("CurrencyPairSecondCurrencies")
                .HasForeignKey("SecondCurrencyId")
                .HasConstraintName("FK_CurrenyID_2")
                .IsRequired() |> ignore
        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+RateRecord", (fun b ->
            b.HasOne("FsEfTest.Models.dbintegrationDomain+CurrencyPair","CurrencyPair")
                .WithMany("RateRecords")
                .HasForeignKey("CurrencyPairId")
                .HasConstraintName("FK_CurrencyPair_ID")
                .IsRequired() |> ignore
            b.HasOne("FsEfTest.Models.dbintegrationDomain+Provider","Provider")
                .WithMany("RateRecords")
                .HasForeignKey("ProviderId")
                .HasConstraintName("FK_ProviderID")
                .IsRequired() |> ignore
        )) |> ignore

        modelBuilder.Entity("FsEfTest.Models.dbintegrationDomain+TradeRecord", (fun b ->
            b.HasOne("FsEfTest.Models.dbintegrationDomain+RateRecord","TradeRate")
                .WithMany("TradeRecords")
                .HasForeignKey("TradeRateId")
                .HasConstraintName("FK_TradeRate_ID")
                .IsRequired() |> ignore
        )) |> ignore

